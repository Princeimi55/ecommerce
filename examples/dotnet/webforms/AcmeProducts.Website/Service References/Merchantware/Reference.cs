//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AcmeProducts.Website.Merchantware {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://schemas.merchantwarehouse.com/merchantware/40/Credit/", ConfigurationName="Merchantware.CreditSoap")]
    public interface CreditSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/ApplyTip", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AcmeProducts.Website.Merchantware.CreditResponse4 ApplyTip(string merchantName, string merchantSiteId, string merchantKey, string token, string tipAmount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/ApplyTip", ReplyAction="*")]
        System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditResponse4> ApplyTipAsync(string merchantName, string merchantSiteId, string merchantKey, string token, string tipAmount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/CaptureSignatureTiff", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AcmeProducts.Website.Merchantware.SignatureResponse4 CaptureSignatureTiff(string merchantName, string merchantSiteId, string merchantKey, string token, string imageData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/CaptureSignatureTiff", ReplyAction="*")]
        System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.SignatureResponse4> CaptureSignatureTiffAsync(string merchantName, string merchantSiteId, string merchantKey, string token, string imageData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/CaptureSignatureVecto" +
            "r", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AcmeProducts.Website.Merchantware.SignatureResponse4 CaptureSignatureVector(string merchantName, string merchantSiteId, string merchantKey, string token, string imageData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/CaptureSignatureVecto" +
            "r", ReplyAction="*")]
        System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.SignatureResponse4> CaptureSignatureVectorAsync(string merchantName, string merchantSiteId, string merchantKey, string token, string imageData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/DebitSale", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AcmeProducts.Website.Merchantware.CreditResponse4 DebitSale(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string trackData, string pinBlock, string pinKsn, string surchargeAmount, string cashbackAmount, string forceDuplicate, string registerNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/DebitSale", ReplyAction="*")]
        System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditResponse4> DebitSaleAsync(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string trackData, string pinBlock, string pinKsn, string surchargeAmount, string cashbackAmount, string forceDuplicate, string registerNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/ForceSale", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AcmeProducts.Website.Merchantware.CreditResponse4 ForceSale(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string authorizationCode, string amount, string cardNumber, string expirationDate, string cardholder, string registerNumber, string merchantTransactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/ForceSale", ReplyAction="*")]
        System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditResponse4> ForceSaleAsync(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string authorizationCode, string amount, string cardNumber, string expirationDate, string cardholder, string registerNumber, string merchantTransactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/Level2Sale", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AcmeProducts.Website.Merchantware.CreditLevel2Response4 Level2Sale(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string trackData, string customerCode, string poNumber, string taxAmount, string forceDuplicate, string registerNumber, string merchantTransactionId, string entryMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/Level2Sale", ReplyAction="*")]
        System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditLevel2Response4> Level2SaleAsync(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string trackData, string customerCode, string poNumber, string taxAmount, string forceDuplicate, string registerNumber, string merchantTransactionId, string entryMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/Level2SaleKeyed", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AcmeProducts.Website.Merchantware.CreditLevel2Response4 Level2SaleKeyed(
                    string merchantName, 
                    string merchantSiteId, 
                    string merchantKey, 
                    string invoiceNumber, 
                    string amount, 
                    string cardNumber, 
                    string expirationDate, 
                    string cardholder, 
                    string avsStreetAddress, 
                    string avsStreetZipCode, 
                    string cardSecurityCode, 
                    string customerCode, 
                    string poNumber, 
                    string taxAmount, 
                    string forceDuplicate, 
                    string registerNumber, 
                    string merchantTransactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/Level2SaleKeyed", ReplyAction="*")]
        System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditLevel2Response4> Level2SaleKeyedAsync(
                    string merchantName, 
                    string merchantSiteId, 
                    string merchantKey, 
                    string invoiceNumber, 
                    string amount, 
                    string cardNumber, 
                    string expirationDate, 
                    string cardholder, 
                    string avsStreetAddress, 
                    string avsStreetZipCode, 
                    string cardSecurityCode, 
                    string customerCode, 
                    string poNumber, 
                    string taxAmount, 
                    string forceDuplicate, 
                    string registerNumber, 
                    string merchantTransactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/PostAuthorization", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AcmeProducts.Website.Merchantware.CreditResponse4 PostAuthorization(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string token, string amount, string registerNumber, string merchantTransactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/PostAuthorization", ReplyAction="*")]
        System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditResponse4> PostAuthorizationAsync(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string token, string amount, string registerNumber, string merchantTransactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/PreAuthorization", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AcmeProducts.Website.Merchantware.CreditResponse4 PreAuthorization(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string trackData, string registerNumber, string merchantTransactionId, string entryMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/PreAuthorization", ReplyAction="*")]
        System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditResponse4> PreAuthorizationAsync(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string trackData, string registerNumber, string merchantTransactionId, string entryMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/PreAuthorizationKeyed" +
            "", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AcmeProducts.Website.Merchantware.CreditResponse4 PreAuthorizationKeyed(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string cardNumber, string expirationDate, string cardholder, string avsStreetAddress, string avsStreetZipCode, string cardSecurityCode, string registerNumber, string merchantTransactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/PreAuthorizationKeyed" +
            "", ReplyAction="*")]
        System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditResponse4> PreAuthorizationKeyedAsync(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string cardNumber, string expirationDate, string cardholder, string avsStreetAddress, string avsStreetZipCode, string cardSecurityCode, string registerNumber, string merchantTransactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/Refund", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AcmeProducts.Website.Merchantware.CreditResponse4 Refund(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string token, string overrideAmount, string registerNumber, string merchantTransactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/Refund", ReplyAction="*")]
        System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditResponse4> RefundAsync(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string token, string overrideAmount, string registerNumber, string merchantTransactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/RepeatSale", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AcmeProducts.Website.Merchantware.CreditResponse4 RepeatSale(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string token, string overrideAmount, string expirationDate, string avsStreetAddress, string avsStreetZipCode, string registerNumber, string merchantTransactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/RepeatSale", ReplyAction="*")]
        System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditResponse4> RepeatSaleAsync(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string token, string overrideAmount, string expirationDate, string avsStreetAddress, string avsStreetZipCode, string registerNumber, string merchantTransactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/Sale", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AcmeProducts.Website.Merchantware.CreditResponse4 Sale(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string trackData, string forceDuplicate, string registerNumber, string merchantTransactionId, string entryMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/Sale", ReplyAction="*")]
        System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditResponse4> SaleAsync(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string trackData, string forceDuplicate, string registerNumber, string merchantTransactionId, string entryMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/SaleKeyed", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AcmeProducts.Website.Merchantware.CreditResponse4 SaleKeyed(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string cardNumber, string expirationDate, string cardholder, string avsStreetAddress, string avsStreetZipCode, string cardSecurityCode, string forceDuplicate, string registerNumber, string merchantTransactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/SaleKeyed", ReplyAction="*")]
        System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditResponse4> SaleKeyedAsync(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string cardNumber, string expirationDate, string cardholder, string avsStreetAddress, string avsStreetZipCode, string cardSecurityCode, string forceDuplicate, string registerNumber, string merchantTransactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/SettleBatch", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AcmeProducts.Website.Merchantware.BatchResponse4 SettleBatch(string merchantName, string merchantSiteId, string merchantKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/SettleBatch", ReplyAction="*")]
        System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.BatchResponse4> SettleBatchAsync(string merchantName, string merchantSiteId, string merchantKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/VoidPreAuthorization", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AcmeProducts.Website.Merchantware.CreditResponse4 VoidPreAuthorization(string merchantName, string merchantSiteId, string merchantKey, string token, string registerNumber, string merchantTransactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/VoidPreAuthorization", ReplyAction="*")]
        System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditResponse4> VoidPreAuthorizationAsync(string merchantName, string merchantSiteId, string merchantKey, string token, string registerNumber, string merchantTransactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/Void", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AcmeProducts.Website.Merchantware.CreditResponse4 Void(string merchantName, string merchantSiteId, string merchantKey, string token, string registerNumber, string merchantTransactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/Void", ReplyAction="*")]
        System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditResponse4> VoidAsync(string merchantName, string merchantSiteId, string merchantKey, string token, string registerNumber, string merchantTransactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/Level2SaleVault", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AcmeProducts.Website.Merchantware.CreditLevel2Response4 Level2SaleVault(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string vaultToken, string customerCode, string poNumber, string taxAmount, string forceDuplicate, string registerNumber, string merchantTransactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/Level2SaleVault", ReplyAction="*")]
        System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditLevel2Response4> Level2SaleVaultAsync(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string vaultToken, string customerCode, string poNumber, string taxAmount, string forceDuplicate, string registerNumber, string merchantTransactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/PreAuthorizationVault" +
            "", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AcmeProducts.Website.Merchantware.CreditResponse4 PreAuthorizationVault(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string vaultToken, string registerNumber, string merchantTransactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/PreAuthorizationVault" +
            "", ReplyAction="*")]
        System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditResponse4> PreAuthorizationVaultAsync(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string vaultToken, string registerNumber, string merchantTransactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/SaleVault", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AcmeProducts.Website.Merchantware.CreditResponse4 SaleVault(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string vaultToken, string forceDuplicate, string registerNumber, string merchantTransactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/SaleVault", ReplyAction="*")]
        System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditResponse4> SaleVaultAsync(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string vaultToken, string forceDuplicate, string registerNumber, string merchantTransactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/VaultBoardCredit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AcmeProducts.Website.Merchantware.VaultBoardingResponse VaultBoardCredit(string merchantName, string merchantSiteId, string merchantKey, string merchantDefinedToken, string trackData, string avsStreetAddress, string avsStreetZipCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/VaultBoardCredit", ReplyAction="*")]
        System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.VaultBoardingResponse> VaultBoardCreditAsync(string merchantName, string merchantSiteId, string merchantKey, string merchantDefinedToken, string trackData, string avsStreetAddress, string avsStreetZipCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/VaultBoardCreditKeyed" +
            "", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AcmeProducts.Website.Merchantware.VaultBoardingResponse VaultBoardCreditKeyed(string merchantName, string merchantSiteId, string merchantKey, string merchantDefinedToken, string cardNumber, string expirationDate, string cardholder, string avsStreetAddress, string avsStreetZipCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/VaultBoardCreditKeyed" +
            "", ReplyAction="*")]
        System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.VaultBoardingResponse> VaultBoardCreditKeyedAsync(string merchantName, string merchantSiteId, string merchantKey, string merchantDefinedToken, string cardNumber, string expirationDate, string cardholder, string avsStreetAddress, string avsStreetZipCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/VaultDeleteToken", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AcmeProducts.Website.Merchantware.VaultBoardingResponse VaultDeleteToken(string merchantName, string merchantSiteId, string merchantKey, string vaultToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/VaultDeleteToken", ReplyAction="*")]
        System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.VaultBoardingResponse> VaultDeleteTokenAsync(string merchantName, string merchantSiteId, string merchantKey, string vaultToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/VaultFindPaymentInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AcmeProducts.Website.Merchantware.VaultPaymentInfoResponse VaultFindPaymentInfo(string merchantName, string merchantSiteId, string merchantKey, string vaultToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/VaultFindPaymentInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.VaultPaymentInfoResponse> VaultFindPaymentInfoAsync(string merchantName, string merchantSiteId, string merchantKey, string vaultToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/EmvAuthorize", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AcmeProducts.Website.Merchantware.EmvAuthorizeResponse4 EmvAuthorize(
                    string merchantName, 
                    string merchantSiteId, 
                    string merchantKey, 
                    string invoiceNumber, 
                    string amount, 
                    string customerCode, 
                    string poNumber, 
                    string taxAmount, 
                    string registerNumber, 
                    string merchantTransactionId, 
                    string entryMode, 
                    string messageCorrelationID, 
                    string cardAcceptorTerminalID, 
                    string pinBlock, 
                    string pinKsn, 
                    string cashbackAmount, 
                    string donationAmount, 
                    string userTipAmount, 
                    string surchargeAmount, 
                    string kernelSoftwareVersion, 
                    string tlvData, 
                    string transactionType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/EmvAuthorize", ReplyAction="*")]
        System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.EmvAuthorizeResponse4> EmvAuthorizeAsync(
                    string merchantName, 
                    string merchantSiteId, 
                    string merchantKey, 
                    string invoiceNumber, 
                    string amount, 
                    string customerCode, 
                    string poNumber, 
                    string taxAmount, 
                    string registerNumber, 
                    string merchantTransactionId, 
                    string entryMode, 
                    string messageCorrelationID, 
                    string cardAcceptorTerminalID, 
                    string pinBlock, 
                    string pinKsn, 
                    string cashbackAmount, 
                    string donationAmount, 
                    string userTipAmount, 
                    string surchargeAmount, 
                    string kernelSoftwareVersion, 
                    string tlvData, 
                    string transactionType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/EmvComplete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AcmeProducts.Website.Merchantware.EmvCompleteResponse4 EmvComplete(
                    string merchantName, 
                    string merchantSiteId, 
                    string merchantKey, 
                    string invoiceNumber, 
                    string amount, 
                    string customerCode, 
                    string poNumber, 
                    string taxAmount, 
                    string registerNumber, 
                    string token, 
                    string merchantTransactionId, 
                    string entryMode, 
                    string messageCorrelationID, 
                    string cardAcceptorTerminalID, 
                    string pinBlock, 
                    string pinKsn, 
                    string cashbackAmount, 
                    string donationAmount, 
                    string userTipAmount, 
                    string surchargeAmount, 
                    string kernelSoftwareVersion, 
                    string tlvData, 
                    string transactionType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.merchantwarehouse.com/merchantware/40/Credit/EmvComplete", ReplyAction="*")]
        System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.EmvCompleteResponse4> EmvCompleteAsync(
                    string merchantName, 
                    string merchantSiteId, 
                    string merchantKey, 
                    string invoiceNumber, 
                    string amount, 
                    string customerCode, 
                    string poNumber, 
                    string taxAmount, 
                    string registerNumber, 
                    string token, 
                    string merchantTransactionId, 
                    string entryMode, 
                    string messageCorrelationID, 
                    string cardAcceptorTerminalID, 
                    string pinBlock, 
                    string pinKsn, 
                    string cashbackAmount, 
                    string donationAmount, 
                    string userTipAmount, 
                    string surchargeAmount, 
                    string kernelSoftwareVersion, 
                    string tlvData, 
                    string transactionType);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.merchantwarehouse.com/merchantware/40/Credit/")]
    public partial class CreditResponse4 : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string amountField;
        
        private string approvalStatusField;
        
        private string authorizationCodeField;
        
        private string avsResponseField;
        
        private string cardholderField;
        
        private string cardNumberField;
        
        private int cardTypeField;
        
        private string cvResponseField;
        
        private int entryModeField;
        
        private string errorMessageField;
        
        private string extraDataField;
        
        private string invoiceNumberField;
        
        private string tokenField;
        
        private string transactionDateField;
        
        private int transactionTypeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Amount {
            get {
                return this.amountField;
            }
            set {
                this.amountField = value;
                this.RaisePropertyChanged("Amount");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ApprovalStatus {
            get {
                return this.approvalStatusField;
            }
            set {
                this.approvalStatusField = value;
                this.RaisePropertyChanged("ApprovalStatus");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string AuthorizationCode {
            get {
                return this.authorizationCodeField;
            }
            set {
                this.authorizationCodeField = value;
                this.RaisePropertyChanged("AuthorizationCode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string AvsResponse {
            get {
                return this.avsResponseField;
            }
            set {
                this.avsResponseField = value;
                this.RaisePropertyChanged("AvsResponse");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Cardholder {
            get {
                return this.cardholderField;
            }
            set {
                this.cardholderField = value;
                this.RaisePropertyChanged("Cardholder");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string CardNumber {
            get {
                return this.cardNumberField;
            }
            set {
                this.cardNumberField = value;
                this.RaisePropertyChanged("CardNumber");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public int CardType {
            get {
                return this.cardTypeField;
            }
            set {
                this.cardTypeField = value;
                this.RaisePropertyChanged("CardType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string CvResponse {
            get {
                return this.cvResponseField;
            }
            set {
                this.cvResponseField = value;
                this.RaisePropertyChanged("CvResponse");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public int EntryMode {
            get {
                return this.entryModeField;
            }
            set {
                this.entryModeField = value;
                this.RaisePropertyChanged("EntryMode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
                this.RaisePropertyChanged("ErrorMessage");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string ExtraData {
            get {
                return this.extraDataField;
            }
            set {
                this.extraDataField = value;
                this.RaisePropertyChanged("ExtraData");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string InvoiceNumber {
            get {
                return this.invoiceNumberField;
            }
            set {
                this.invoiceNumberField = value;
                this.RaisePropertyChanged("InvoiceNumber");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public string Token {
            get {
                return this.tokenField;
            }
            set {
                this.tokenField = value;
                this.RaisePropertyChanged("Token");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public string TransactionDate {
            get {
                return this.transactionDateField;
            }
            set {
                this.transactionDateField = value;
                this.RaisePropertyChanged("TransactionDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public int TransactionType {
            get {
                return this.transactionTypeField;
            }
            set {
                this.transactionTypeField = value;
                this.RaisePropertyChanged("TransactionType");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.merchantwarehouse.com/merchantware/40/Credit/")]
    public partial class EmvCompleteResponse4 : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string statusField;
        
        private string errorMessageField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=0)]
        public string Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
                this.RaisePropertyChanged("Status");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
                this.RaisePropertyChanged("ErrorMessage");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.merchantwarehouse.com/merchantware/40/Credit/")]
    public partial class EmvAuthorizeResponse4 : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string approvalStatusField;
        
        private string errorMessageField;
        
        private string tokenField;
        
        private string transactionDateField;
        
        private string tlvDataField;
        
        private string cashbackAmountField;
        
        private string donationAmountField;
        
        private string userTipAmountField;
        
        private string surchargeAmountField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=0)]
        public string ApprovalStatus {
            get {
                return this.approvalStatusField;
            }
            set {
                this.approvalStatusField = value;
                this.RaisePropertyChanged("ApprovalStatus");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
                this.RaisePropertyChanged("ErrorMessage");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Token {
            get {
                return this.tokenField;
            }
            set {
                this.tokenField = value;
                this.RaisePropertyChanged("Token");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string TransactionDate {
            get {
                return this.transactionDateField;
            }
            set {
                this.transactionDateField = value;
                this.RaisePropertyChanged("TransactionDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string TlvData {
            get {
                return this.tlvDataField;
            }
            set {
                this.tlvDataField = value;
                this.RaisePropertyChanged("TlvData");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string CashbackAmount {
            get {
                return this.cashbackAmountField;
            }
            set {
                this.cashbackAmountField = value;
                this.RaisePropertyChanged("CashbackAmount");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string DonationAmount {
            get {
                return this.donationAmountField;
            }
            set {
                this.donationAmountField = value;
                this.RaisePropertyChanged("DonationAmount");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string UserTipAmount {
            get {
                return this.userTipAmountField;
            }
            set {
                this.userTipAmountField = value;
                this.RaisePropertyChanged("UserTipAmount");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string SurchargeAmount {
            get {
                return this.surchargeAmountField;
            }
            set {
                this.surchargeAmountField = value;
                this.RaisePropertyChanged("SurchargeAmount");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.merchantwarehouse.com/merchantware/40/Credit/")]
    public partial class VaultPaymentInfoResponse : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string avsStreetAddressField;
        
        private string avsZipCodeField;
        
        private string cardholderField;
        
        private string cardNumberField;
        
        private string cardTypeField;
        
        private string errorCodeField;
        
        private string errorMessageField;
        
        private string expirationDateField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string AvsStreetAddress {
            get {
                return this.avsStreetAddressField;
            }
            set {
                this.avsStreetAddressField = value;
                this.RaisePropertyChanged("AvsStreetAddress");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string AvsZipCode {
            get {
                return this.avsZipCodeField;
            }
            set {
                this.avsZipCodeField = value;
                this.RaisePropertyChanged("AvsZipCode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Cardholder {
            get {
                return this.cardholderField;
            }
            set {
                this.cardholderField = value;
                this.RaisePropertyChanged("Cardholder");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string CardNumber {
            get {
                return this.cardNumberField;
            }
            set {
                this.cardNumberField = value;
                this.RaisePropertyChanged("CardNumber");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string CardType {
            get {
                return this.cardTypeField;
            }
            set {
                this.cardTypeField = value;
                this.RaisePropertyChanged("CardType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
                this.RaisePropertyChanged("ErrorCode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
                this.RaisePropertyChanged("ErrorMessage");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string ExpirationDate {
            get {
                return this.expirationDateField;
            }
            set {
                this.expirationDateField = value;
                this.RaisePropertyChanged("ExpirationDate");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.merchantwarehouse.com/merchantware/40/Credit/")]
    public partial class VaultBoardingResponse : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string errorCodeField;
        
        private string errorMessageField;
        
        private string vaultTokenField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
                this.RaisePropertyChanged("ErrorCode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
                this.RaisePropertyChanged("ErrorMessage");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string VaultToken {
            get {
                return this.vaultTokenField;
            }
            set {
                this.vaultTokenField = value;
                this.RaisePropertyChanged("VaultToken");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.merchantwarehouse.com/merchantware/40/Credit/")]
    public partial class BatchResponse4 : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string authorizationCodeField;
        
        private string batchAmountField;
        
        private string batchStatusField;
        
        private string errorMessageField;
        
        private string extraDataField;
        
        private string tokenField;
        
        private int transactionCountField;
        
        private string transactionDateField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string AuthorizationCode {
            get {
                return this.authorizationCodeField;
            }
            set {
                this.authorizationCodeField = value;
                this.RaisePropertyChanged("AuthorizationCode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string BatchAmount {
            get {
                return this.batchAmountField;
            }
            set {
                this.batchAmountField = value;
                this.RaisePropertyChanged("BatchAmount");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string BatchStatus {
            get {
                return this.batchStatusField;
            }
            set {
                this.batchStatusField = value;
                this.RaisePropertyChanged("BatchStatus");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
                this.RaisePropertyChanged("ErrorMessage");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string ExtraData {
            get {
                return this.extraDataField;
            }
            set {
                this.extraDataField = value;
                this.RaisePropertyChanged("ExtraData");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string Token {
            get {
                return this.tokenField;
            }
            set {
                this.tokenField = value;
                this.RaisePropertyChanged("Token");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public int TransactionCount {
            get {
                return this.transactionCountField;
            }
            set {
                this.transactionCountField = value;
                this.RaisePropertyChanged("TransactionCount");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string TransactionDate {
            get {
                return this.transactionDateField;
            }
            set {
                this.transactionDateField = value;
                this.RaisePropertyChanged("TransactionDate");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.merchantwarehouse.com/merchantware/40/Credit/")]
    public partial class CreditLevel2Response4 : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string amountField;
        
        private string approvalStatusField;
        
        private string authorizationCodeField;
        
        private string avsResponseField;
        
        private string cardholderField;
        
        private string cardNumberField;
        
        private int cardTypeField;
        
        private string customerCodeField;
        
        private string cvResponseField;
        
        private int entryModeField;
        
        private string errorMessageField;
        
        private string extraDataField;
        
        private string invoiceNumberField;
        
        private string purchaseOrderNumberField;
        
        private string taxAmountField;
        
        private string tokenField;
        
        private string transactionDateField;
        
        private int transactionTypeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Amount {
            get {
                return this.amountField;
            }
            set {
                this.amountField = value;
                this.RaisePropertyChanged("Amount");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ApprovalStatus {
            get {
                return this.approvalStatusField;
            }
            set {
                this.approvalStatusField = value;
                this.RaisePropertyChanged("ApprovalStatus");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string AuthorizationCode {
            get {
                return this.authorizationCodeField;
            }
            set {
                this.authorizationCodeField = value;
                this.RaisePropertyChanged("AuthorizationCode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string AvsResponse {
            get {
                return this.avsResponseField;
            }
            set {
                this.avsResponseField = value;
                this.RaisePropertyChanged("AvsResponse");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Cardholder {
            get {
                return this.cardholderField;
            }
            set {
                this.cardholderField = value;
                this.RaisePropertyChanged("Cardholder");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string CardNumber {
            get {
                return this.cardNumberField;
            }
            set {
                this.cardNumberField = value;
                this.RaisePropertyChanged("CardNumber");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public int CardType {
            get {
                return this.cardTypeField;
            }
            set {
                this.cardTypeField = value;
                this.RaisePropertyChanged("CardType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string CustomerCode {
            get {
                return this.customerCodeField;
            }
            set {
                this.customerCodeField = value;
                this.RaisePropertyChanged("CustomerCode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string CvResponse {
            get {
                return this.cvResponseField;
            }
            set {
                this.cvResponseField = value;
                this.RaisePropertyChanged("CvResponse");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public int EntryMode {
            get {
                return this.entryModeField;
            }
            set {
                this.entryModeField = value;
                this.RaisePropertyChanged("EntryMode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
                this.RaisePropertyChanged("ErrorMessage");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string ExtraData {
            get {
                return this.extraDataField;
            }
            set {
                this.extraDataField = value;
                this.RaisePropertyChanged("ExtraData");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public string InvoiceNumber {
            get {
                return this.invoiceNumberField;
            }
            set {
                this.invoiceNumberField = value;
                this.RaisePropertyChanged("InvoiceNumber");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public string PurchaseOrderNumber {
            get {
                return this.purchaseOrderNumberField;
            }
            set {
                this.purchaseOrderNumberField = value;
                this.RaisePropertyChanged("PurchaseOrderNumber");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public string TaxAmount {
            get {
                return this.taxAmountField;
            }
            set {
                this.taxAmountField = value;
                this.RaisePropertyChanged("TaxAmount");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=15)]
        public string Token {
            get {
                return this.tokenField;
            }
            set {
                this.tokenField = value;
                this.RaisePropertyChanged("Token");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=16)]
        public string TransactionDate {
            get {
                return this.transactionDateField;
            }
            set {
                this.transactionDateField = value;
                this.RaisePropertyChanged("TransactionDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=17)]
        public int TransactionType {
            get {
                return this.transactionTypeField;
            }
            set {
                this.transactionTypeField = value;
                this.RaisePropertyChanged("TransactionType");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.merchantwarehouse.com/merchantware/40/Credit/")]
    public partial class SignatureResponse4 : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string errorMessageField;
        
        private int signatureTypeField;
        
        private string tokenField;
        
        private string transactionDateField;
        
        private string uploadStatusField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
                this.RaisePropertyChanged("ErrorMessage");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int SignatureType {
            get {
                return this.signatureTypeField;
            }
            set {
                this.signatureTypeField = value;
                this.RaisePropertyChanged("SignatureType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Token {
            get {
                return this.tokenField;
            }
            set {
                this.tokenField = value;
                this.RaisePropertyChanged("Token");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string TransactionDate {
            get {
                return this.transactionDateField;
            }
            set {
                this.transactionDateField = value;
                this.RaisePropertyChanged("TransactionDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string UploadStatus {
            get {
                return this.uploadStatusField;
            }
            set {
                this.uploadStatusField = value;
                this.RaisePropertyChanged("UploadStatus");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface CreditSoapChannel : AcmeProducts.Website.Merchantware.CreditSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreditSoapClient : System.ServiceModel.ClientBase<AcmeProducts.Website.Merchantware.CreditSoap>, AcmeProducts.Website.Merchantware.CreditSoap {
        
        public CreditSoapClient() {
        }
        
        public CreditSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CreditSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CreditSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CreditSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public AcmeProducts.Website.Merchantware.CreditResponse4 ApplyTip(string merchantName, string merchantSiteId, string merchantKey, string token, string tipAmount) {
            return base.Channel.ApplyTip(merchantName, merchantSiteId, merchantKey, token, tipAmount);
        }
        
        public System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditResponse4> ApplyTipAsync(string merchantName, string merchantSiteId, string merchantKey, string token, string tipAmount) {
            return base.Channel.ApplyTipAsync(merchantName, merchantSiteId, merchantKey, token, tipAmount);
        }
        
        public AcmeProducts.Website.Merchantware.SignatureResponse4 CaptureSignatureTiff(string merchantName, string merchantSiteId, string merchantKey, string token, string imageData) {
            return base.Channel.CaptureSignatureTiff(merchantName, merchantSiteId, merchantKey, token, imageData);
        }
        
        public System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.SignatureResponse4> CaptureSignatureTiffAsync(string merchantName, string merchantSiteId, string merchantKey, string token, string imageData) {
            return base.Channel.CaptureSignatureTiffAsync(merchantName, merchantSiteId, merchantKey, token, imageData);
        }
        
        public AcmeProducts.Website.Merchantware.SignatureResponse4 CaptureSignatureVector(string merchantName, string merchantSiteId, string merchantKey, string token, string imageData) {
            return base.Channel.CaptureSignatureVector(merchantName, merchantSiteId, merchantKey, token, imageData);
        }
        
        public System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.SignatureResponse4> CaptureSignatureVectorAsync(string merchantName, string merchantSiteId, string merchantKey, string token, string imageData) {
            return base.Channel.CaptureSignatureVectorAsync(merchantName, merchantSiteId, merchantKey, token, imageData);
        }
        
        public AcmeProducts.Website.Merchantware.CreditResponse4 DebitSale(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string trackData, string pinBlock, string pinKsn, string surchargeAmount, string cashbackAmount, string forceDuplicate, string registerNumber) {
            return base.Channel.DebitSale(merchantName, merchantSiteId, merchantKey, invoiceNumber, amount, trackData, pinBlock, pinKsn, surchargeAmount, cashbackAmount, forceDuplicate, registerNumber);
        }
        
        public System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditResponse4> DebitSaleAsync(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string trackData, string pinBlock, string pinKsn, string surchargeAmount, string cashbackAmount, string forceDuplicate, string registerNumber) {
            return base.Channel.DebitSaleAsync(merchantName, merchantSiteId, merchantKey, invoiceNumber, amount, trackData, pinBlock, pinKsn, surchargeAmount, cashbackAmount, forceDuplicate, registerNumber);
        }
        
        public AcmeProducts.Website.Merchantware.CreditResponse4 ForceSale(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string authorizationCode, string amount, string cardNumber, string expirationDate, string cardholder, string registerNumber, string merchantTransactionId) {
            return base.Channel.ForceSale(merchantName, merchantSiteId, merchantKey, invoiceNumber, authorizationCode, amount, cardNumber, expirationDate, cardholder, registerNumber, merchantTransactionId);
        }
        
        public System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditResponse4> ForceSaleAsync(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string authorizationCode, string amount, string cardNumber, string expirationDate, string cardholder, string registerNumber, string merchantTransactionId) {
            return base.Channel.ForceSaleAsync(merchantName, merchantSiteId, merchantKey, invoiceNumber, authorizationCode, amount, cardNumber, expirationDate, cardholder, registerNumber, merchantTransactionId);
        }
        
        public AcmeProducts.Website.Merchantware.CreditLevel2Response4 Level2Sale(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string trackData, string customerCode, string poNumber, string taxAmount, string forceDuplicate, string registerNumber, string merchantTransactionId, string entryMode) {
            return base.Channel.Level2Sale(merchantName, merchantSiteId, merchantKey, invoiceNumber, amount, trackData, customerCode, poNumber, taxAmount, forceDuplicate, registerNumber, merchantTransactionId, entryMode);
        }
        
        public System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditLevel2Response4> Level2SaleAsync(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string trackData, string customerCode, string poNumber, string taxAmount, string forceDuplicate, string registerNumber, string merchantTransactionId, string entryMode) {
            return base.Channel.Level2SaleAsync(merchantName, merchantSiteId, merchantKey, invoiceNumber, amount, trackData, customerCode, poNumber, taxAmount, forceDuplicate, registerNumber, merchantTransactionId, entryMode);
        }
        
        public AcmeProducts.Website.Merchantware.CreditLevel2Response4 Level2SaleKeyed(
                    string merchantName, 
                    string merchantSiteId, 
                    string merchantKey, 
                    string invoiceNumber, 
                    string amount, 
                    string cardNumber, 
                    string expirationDate, 
                    string cardholder, 
                    string avsStreetAddress, 
                    string avsStreetZipCode, 
                    string cardSecurityCode, 
                    string customerCode, 
                    string poNumber, 
                    string taxAmount, 
                    string forceDuplicate, 
                    string registerNumber, 
                    string merchantTransactionId) {
            return base.Channel.Level2SaleKeyed(merchantName, merchantSiteId, merchantKey, invoiceNumber, amount, cardNumber, expirationDate, cardholder, avsStreetAddress, avsStreetZipCode, cardSecurityCode, customerCode, poNumber, taxAmount, forceDuplicate, registerNumber, merchantTransactionId);
        }
        
        public System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditLevel2Response4> Level2SaleKeyedAsync(
                    string merchantName, 
                    string merchantSiteId, 
                    string merchantKey, 
                    string invoiceNumber, 
                    string amount, 
                    string cardNumber, 
                    string expirationDate, 
                    string cardholder, 
                    string avsStreetAddress, 
                    string avsStreetZipCode, 
                    string cardSecurityCode, 
                    string customerCode, 
                    string poNumber, 
                    string taxAmount, 
                    string forceDuplicate, 
                    string registerNumber, 
                    string merchantTransactionId) {
            return base.Channel.Level2SaleKeyedAsync(merchantName, merchantSiteId, merchantKey, invoiceNumber, amount, cardNumber, expirationDate, cardholder, avsStreetAddress, avsStreetZipCode, cardSecurityCode, customerCode, poNumber, taxAmount, forceDuplicate, registerNumber, merchantTransactionId);
        }
        
        public AcmeProducts.Website.Merchantware.CreditResponse4 PostAuthorization(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string token, string amount, string registerNumber, string merchantTransactionId) {
            return base.Channel.PostAuthorization(merchantName, merchantSiteId, merchantKey, invoiceNumber, token, amount, registerNumber, merchantTransactionId);
        }
        
        public System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditResponse4> PostAuthorizationAsync(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string token, string amount, string registerNumber, string merchantTransactionId) {
            return base.Channel.PostAuthorizationAsync(merchantName, merchantSiteId, merchantKey, invoiceNumber, token, amount, registerNumber, merchantTransactionId);
        }
        
        public AcmeProducts.Website.Merchantware.CreditResponse4 PreAuthorization(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string trackData, string registerNumber, string merchantTransactionId, string entryMode) {
            return base.Channel.PreAuthorization(merchantName, merchantSiteId, merchantKey, invoiceNumber, amount, trackData, registerNumber, merchantTransactionId, entryMode);
        }
        
        public System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditResponse4> PreAuthorizationAsync(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string trackData, string registerNumber, string merchantTransactionId, string entryMode) {
            return base.Channel.PreAuthorizationAsync(merchantName, merchantSiteId, merchantKey, invoiceNumber, amount, trackData, registerNumber, merchantTransactionId, entryMode);
        }
        
        public AcmeProducts.Website.Merchantware.CreditResponse4 PreAuthorizationKeyed(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string cardNumber, string expirationDate, string cardholder, string avsStreetAddress, string avsStreetZipCode, string cardSecurityCode, string registerNumber, string merchantTransactionId) {
            return base.Channel.PreAuthorizationKeyed(merchantName, merchantSiteId, merchantKey, invoiceNumber, amount, cardNumber, expirationDate, cardholder, avsStreetAddress, avsStreetZipCode, cardSecurityCode, registerNumber, merchantTransactionId);
        }
        
        public System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditResponse4> PreAuthorizationKeyedAsync(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string cardNumber, string expirationDate, string cardholder, string avsStreetAddress, string avsStreetZipCode, string cardSecurityCode, string registerNumber, string merchantTransactionId) {
            return base.Channel.PreAuthorizationKeyedAsync(merchantName, merchantSiteId, merchantKey, invoiceNumber, amount, cardNumber, expirationDate, cardholder, avsStreetAddress, avsStreetZipCode, cardSecurityCode, registerNumber, merchantTransactionId);
        }
        
        public AcmeProducts.Website.Merchantware.CreditResponse4 Refund(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string token, string overrideAmount, string registerNumber, string merchantTransactionId) {
            return base.Channel.Refund(merchantName, merchantSiteId, merchantKey, invoiceNumber, token, overrideAmount, registerNumber, merchantTransactionId);
        }
        
        public System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditResponse4> RefundAsync(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string token, string overrideAmount, string registerNumber, string merchantTransactionId) {
            return base.Channel.RefundAsync(merchantName, merchantSiteId, merchantKey, invoiceNumber, token, overrideAmount, registerNumber, merchantTransactionId);
        }
        
        public AcmeProducts.Website.Merchantware.CreditResponse4 RepeatSale(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string token, string overrideAmount, string expirationDate, string avsStreetAddress, string avsStreetZipCode, string registerNumber, string merchantTransactionId) {
            return base.Channel.RepeatSale(merchantName, merchantSiteId, merchantKey, invoiceNumber, token, overrideAmount, expirationDate, avsStreetAddress, avsStreetZipCode, registerNumber, merchantTransactionId);
        }
        
        public System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditResponse4> RepeatSaleAsync(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string token, string overrideAmount, string expirationDate, string avsStreetAddress, string avsStreetZipCode, string registerNumber, string merchantTransactionId) {
            return base.Channel.RepeatSaleAsync(merchantName, merchantSiteId, merchantKey, invoiceNumber, token, overrideAmount, expirationDate, avsStreetAddress, avsStreetZipCode, registerNumber, merchantTransactionId);
        }
        
        public AcmeProducts.Website.Merchantware.CreditResponse4 Sale(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string trackData, string forceDuplicate, string registerNumber, string merchantTransactionId, string entryMode) {
            return base.Channel.Sale(merchantName, merchantSiteId, merchantKey, invoiceNumber, amount, trackData, forceDuplicate, registerNumber, merchantTransactionId, entryMode);
        }
        
        public System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditResponse4> SaleAsync(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string trackData, string forceDuplicate, string registerNumber, string merchantTransactionId, string entryMode) {
            return base.Channel.SaleAsync(merchantName, merchantSiteId, merchantKey, invoiceNumber, amount, trackData, forceDuplicate, registerNumber, merchantTransactionId, entryMode);
        }
        
        public AcmeProducts.Website.Merchantware.CreditResponse4 SaleKeyed(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string cardNumber, string expirationDate, string cardholder, string avsStreetAddress, string avsStreetZipCode, string cardSecurityCode, string forceDuplicate, string registerNumber, string merchantTransactionId) {
            return base.Channel.SaleKeyed(merchantName, merchantSiteId, merchantKey, invoiceNumber, amount, cardNumber, expirationDate, cardholder, avsStreetAddress, avsStreetZipCode, cardSecurityCode, forceDuplicate, registerNumber, merchantTransactionId);
        }
        
        public System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditResponse4> SaleKeyedAsync(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string cardNumber, string expirationDate, string cardholder, string avsStreetAddress, string avsStreetZipCode, string cardSecurityCode, string forceDuplicate, string registerNumber, string merchantTransactionId) {
            return base.Channel.SaleKeyedAsync(merchantName, merchantSiteId, merchantKey, invoiceNumber, amount, cardNumber, expirationDate, cardholder, avsStreetAddress, avsStreetZipCode, cardSecurityCode, forceDuplicate, registerNumber, merchantTransactionId);
        }
        
        public AcmeProducts.Website.Merchantware.BatchResponse4 SettleBatch(string merchantName, string merchantSiteId, string merchantKey) {
            return base.Channel.SettleBatch(merchantName, merchantSiteId, merchantKey);
        }
        
        public System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.BatchResponse4> SettleBatchAsync(string merchantName, string merchantSiteId, string merchantKey) {
            return base.Channel.SettleBatchAsync(merchantName, merchantSiteId, merchantKey);
        }
        
        public AcmeProducts.Website.Merchantware.CreditResponse4 VoidPreAuthorization(string merchantName, string merchantSiteId, string merchantKey, string token, string registerNumber, string merchantTransactionId) {
            return base.Channel.VoidPreAuthorization(merchantName, merchantSiteId, merchantKey, token, registerNumber, merchantTransactionId);
        }
        
        public System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditResponse4> VoidPreAuthorizationAsync(string merchantName, string merchantSiteId, string merchantKey, string token, string registerNumber, string merchantTransactionId) {
            return base.Channel.VoidPreAuthorizationAsync(merchantName, merchantSiteId, merchantKey, token, registerNumber, merchantTransactionId);
        }
        
        public AcmeProducts.Website.Merchantware.CreditResponse4 Void(string merchantName, string merchantSiteId, string merchantKey, string token, string registerNumber, string merchantTransactionId) {
            return base.Channel.Void(merchantName, merchantSiteId, merchantKey, token, registerNumber, merchantTransactionId);
        }
        
        public System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditResponse4> VoidAsync(string merchantName, string merchantSiteId, string merchantKey, string token, string registerNumber, string merchantTransactionId) {
            return base.Channel.VoidAsync(merchantName, merchantSiteId, merchantKey, token, registerNumber, merchantTransactionId);
        }
        
        public AcmeProducts.Website.Merchantware.CreditLevel2Response4 Level2SaleVault(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string vaultToken, string customerCode, string poNumber, string taxAmount, string forceDuplicate, string registerNumber, string merchantTransactionId) {
            return base.Channel.Level2SaleVault(merchantName, merchantSiteId, merchantKey, invoiceNumber, amount, vaultToken, customerCode, poNumber, taxAmount, forceDuplicate, registerNumber, merchantTransactionId);
        }
        
        public System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditLevel2Response4> Level2SaleVaultAsync(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string vaultToken, string customerCode, string poNumber, string taxAmount, string forceDuplicate, string registerNumber, string merchantTransactionId) {
            return base.Channel.Level2SaleVaultAsync(merchantName, merchantSiteId, merchantKey, invoiceNumber, amount, vaultToken, customerCode, poNumber, taxAmount, forceDuplicate, registerNumber, merchantTransactionId);
        }
        
        public AcmeProducts.Website.Merchantware.CreditResponse4 PreAuthorizationVault(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string vaultToken, string registerNumber, string merchantTransactionId) {
            return base.Channel.PreAuthorizationVault(merchantName, merchantSiteId, merchantKey, invoiceNumber, amount, vaultToken, registerNumber, merchantTransactionId);
        }
        
        public System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditResponse4> PreAuthorizationVaultAsync(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string vaultToken, string registerNumber, string merchantTransactionId) {
            return base.Channel.PreAuthorizationVaultAsync(merchantName, merchantSiteId, merchantKey, invoiceNumber, amount, vaultToken, registerNumber, merchantTransactionId);
        }
        
        public AcmeProducts.Website.Merchantware.CreditResponse4 SaleVault(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string vaultToken, string forceDuplicate, string registerNumber, string merchantTransactionId) {
            return base.Channel.SaleVault(merchantName, merchantSiteId, merchantKey, invoiceNumber, amount, vaultToken, forceDuplicate, registerNumber, merchantTransactionId);
        }
        
        public System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.CreditResponse4> SaleVaultAsync(string merchantName, string merchantSiteId, string merchantKey, string invoiceNumber, string amount, string vaultToken, string forceDuplicate, string registerNumber, string merchantTransactionId) {
            return base.Channel.SaleVaultAsync(merchantName, merchantSiteId, merchantKey, invoiceNumber, amount, vaultToken, forceDuplicate, registerNumber, merchantTransactionId);
        }
        
        public AcmeProducts.Website.Merchantware.VaultBoardingResponse VaultBoardCredit(string merchantName, string merchantSiteId, string merchantKey, string merchantDefinedToken, string trackData, string avsStreetAddress, string avsStreetZipCode) {
            return base.Channel.VaultBoardCredit(merchantName, merchantSiteId, merchantKey, merchantDefinedToken, trackData, avsStreetAddress, avsStreetZipCode);
        }
        
        public System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.VaultBoardingResponse> VaultBoardCreditAsync(string merchantName, string merchantSiteId, string merchantKey, string merchantDefinedToken, string trackData, string avsStreetAddress, string avsStreetZipCode) {
            return base.Channel.VaultBoardCreditAsync(merchantName, merchantSiteId, merchantKey, merchantDefinedToken, trackData, avsStreetAddress, avsStreetZipCode);
        }
        
        public AcmeProducts.Website.Merchantware.VaultBoardingResponse VaultBoardCreditKeyed(string merchantName, string merchantSiteId, string merchantKey, string merchantDefinedToken, string cardNumber, string expirationDate, string cardholder, string avsStreetAddress, string avsStreetZipCode) {
            return base.Channel.VaultBoardCreditKeyed(merchantName, merchantSiteId, merchantKey, merchantDefinedToken, cardNumber, expirationDate, cardholder, avsStreetAddress, avsStreetZipCode);
        }
        
        public System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.VaultBoardingResponse> VaultBoardCreditKeyedAsync(string merchantName, string merchantSiteId, string merchantKey, string merchantDefinedToken, string cardNumber, string expirationDate, string cardholder, string avsStreetAddress, string avsStreetZipCode) {
            return base.Channel.VaultBoardCreditKeyedAsync(merchantName, merchantSiteId, merchantKey, merchantDefinedToken, cardNumber, expirationDate, cardholder, avsStreetAddress, avsStreetZipCode);
        }
        
        public AcmeProducts.Website.Merchantware.VaultBoardingResponse VaultDeleteToken(string merchantName, string merchantSiteId, string merchantKey, string vaultToken) {
            return base.Channel.VaultDeleteToken(merchantName, merchantSiteId, merchantKey, vaultToken);
        }
        
        public System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.VaultBoardingResponse> VaultDeleteTokenAsync(string merchantName, string merchantSiteId, string merchantKey, string vaultToken) {
            return base.Channel.VaultDeleteTokenAsync(merchantName, merchantSiteId, merchantKey, vaultToken);
        }
        
        public AcmeProducts.Website.Merchantware.VaultPaymentInfoResponse VaultFindPaymentInfo(string merchantName, string merchantSiteId, string merchantKey, string vaultToken) {
            return base.Channel.VaultFindPaymentInfo(merchantName, merchantSiteId, merchantKey, vaultToken);
        }
        
        public System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.VaultPaymentInfoResponse> VaultFindPaymentInfoAsync(string merchantName, string merchantSiteId, string merchantKey, string vaultToken) {
            return base.Channel.VaultFindPaymentInfoAsync(merchantName, merchantSiteId, merchantKey, vaultToken);
        }
        
        public AcmeProducts.Website.Merchantware.EmvAuthorizeResponse4 EmvAuthorize(
                    string merchantName, 
                    string merchantSiteId, 
                    string merchantKey, 
                    string invoiceNumber, 
                    string amount, 
                    string customerCode, 
                    string poNumber, 
                    string taxAmount, 
                    string registerNumber, 
                    string merchantTransactionId, 
                    string entryMode, 
                    string messageCorrelationID, 
                    string cardAcceptorTerminalID, 
                    string pinBlock, 
                    string pinKsn, 
                    string cashbackAmount, 
                    string donationAmount, 
                    string userTipAmount, 
                    string surchargeAmount, 
                    string kernelSoftwareVersion, 
                    string tlvData, 
                    string transactionType) {
            return base.Channel.EmvAuthorize(merchantName, merchantSiteId, merchantKey, invoiceNumber, amount, customerCode, poNumber, taxAmount, registerNumber, merchantTransactionId, entryMode, messageCorrelationID, cardAcceptorTerminalID, pinBlock, pinKsn, cashbackAmount, donationAmount, userTipAmount, surchargeAmount, kernelSoftwareVersion, tlvData, transactionType);
        }
        
        public System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.EmvAuthorizeResponse4> EmvAuthorizeAsync(
                    string merchantName, 
                    string merchantSiteId, 
                    string merchantKey, 
                    string invoiceNumber, 
                    string amount, 
                    string customerCode, 
                    string poNumber, 
                    string taxAmount, 
                    string registerNumber, 
                    string merchantTransactionId, 
                    string entryMode, 
                    string messageCorrelationID, 
                    string cardAcceptorTerminalID, 
                    string pinBlock, 
                    string pinKsn, 
                    string cashbackAmount, 
                    string donationAmount, 
                    string userTipAmount, 
                    string surchargeAmount, 
                    string kernelSoftwareVersion, 
                    string tlvData, 
                    string transactionType) {
            return base.Channel.EmvAuthorizeAsync(merchantName, merchantSiteId, merchantKey, invoiceNumber, amount, customerCode, poNumber, taxAmount, registerNumber, merchantTransactionId, entryMode, messageCorrelationID, cardAcceptorTerminalID, pinBlock, pinKsn, cashbackAmount, donationAmount, userTipAmount, surchargeAmount, kernelSoftwareVersion, tlvData, transactionType);
        }
        
        public AcmeProducts.Website.Merchantware.EmvCompleteResponse4 EmvComplete(
                    string merchantName, 
                    string merchantSiteId, 
                    string merchantKey, 
                    string invoiceNumber, 
                    string amount, 
                    string customerCode, 
                    string poNumber, 
                    string taxAmount, 
                    string registerNumber, 
                    string token, 
                    string merchantTransactionId, 
                    string entryMode, 
                    string messageCorrelationID, 
                    string cardAcceptorTerminalID, 
                    string pinBlock, 
                    string pinKsn, 
                    string cashbackAmount, 
                    string donationAmount, 
                    string userTipAmount, 
                    string surchargeAmount, 
                    string kernelSoftwareVersion, 
                    string tlvData, 
                    string transactionType) {
            return base.Channel.EmvComplete(merchantName, merchantSiteId, merchantKey, invoiceNumber, amount, customerCode, poNumber, taxAmount, registerNumber, token, merchantTransactionId, entryMode, messageCorrelationID, cardAcceptorTerminalID, pinBlock, pinKsn, cashbackAmount, donationAmount, userTipAmount, surchargeAmount, kernelSoftwareVersion, tlvData, transactionType);
        }
        
        public System.Threading.Tasks.Task<AcmeProducts.Website.Merchantware.EmvCompleteResponse4> EmvCompleteAsync(
                    string merchantName, 
                    string merchantSiteId, 
                    string merchantKey, 
                    string invoiceNumber, 
                    string amount, 
                    string customerCode, 
                    string poNumber, 
                    string taxAmount, 
                    string registerNumber, 
                    string token, 
                    string merchantTransactionId, 
                    string entryMode, 
                    string messageCorrelationID, 
                    string cardAcceptorTerminalID, 
                    string pinBlock, 
                    string pinKsn, 
                    string cashbackAmount, 
                    string donationAmount, 
                    string userTipAmount, 
                    string surchargeAmount, 
                    string kernelSoftwareVersion, 
                    string tlvData, 
                    string transactionType) {
            return base.Channel.EmvCompleteAsync(merchantName, merchantSiteId, merchantKey, invoiceNumber, amount, customerCode, poNumber, taxAmount, registerNumber, token, merchantTransactionId, entryMode, messageCorrelationID, cardAcceptorTerminalID, pinBlock, pinKsn, cashbackAmount, donationAmount, userTipAmount, surchargeAmount, kernelSoftwareVersion, tlvData, transactionType);
        }
    }
}
